
==================== FINAL INTERFACE ====================
2018-12-06 05:36:07.740941841 UTC

interface main:Main 8044
  interface hash: 441abb9b4adb303d2b9e5308439d05ac
  ABI hash: bef45fe3790cd1e467d026aaef1589fa
  export-list hash: 18c8a12c03141d899ce0308acfee4d0f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4d1496b5b0a05e3dd943b36401e57e8
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.echoHandler
  Main.main
  Main.site
module dependencies:
package dependencies: array-0.5.2.0 attoparsec-0.13.2.2
                      base-4.11.1.0 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 case-insensitive-1.2.0.11 clock-0.7.2
                      containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2 io-streams-1.5.0.1
                      io-streams-haproxy-1.0.0.2 lifted-base-0.2.3.12
                      monad-control-1.0.2.3 mtl-2.2.2 network-2.6.3.6 primitive-0.6.3.0
                      process-1.6.3.0 readable-0.3.1 scientific-0.3.6.2 snap-core-1.0.3.2
                      snap-server-1.1.0.0 stm-2.4.5.1 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 transformers-base-0.4.5.2 unix-2.7.2.2
                      unix-compat-0.5.1 unordered-containers-0.2.9.0 vector-0.12.0.1
                      zlib-0.6.2 zlib-bindings-0.1.1.5
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         snap-core-1.0.3.2:Snap.Internal.Instances
         stm-2.4.5.1:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed network-2.6.3.6:Network.Socket
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         snap-core-1.0.3.2:Snap.Internal.Core text-1.2.3.1:Data.Text
                         text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  snap-core-1.0.3.2:Snap.Core 68999f9d0f4d216a6055ce106a145ee2
import  -/  snap-core-1.0.3.2:Snap.Internal.Core 5f5f38996b316012cbfa0d0ed832ac85
import  -/  snap-core-1.0.3.2:Snap.Internal.Routing 5b08e044ddf9bd9c202e00a4a84812dc
import  -/  snap-core-1.0.3.2:Snap.Internal.Util.FileServe a9095d8845e4dbc24f45bc7c492c5090
import  -/  snap-core-1.0.3.2:Snap.Util.FileServe 111d0574317eafe1394a9821ca62f7f0
import  -/  snap-server-1.1.0.0:Snap.Http.Server 536a7d4894198ada81c372dc22550550
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
dd6202104e3bfb78a3f748b7ea8748c6
  $wb ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ @ r1
                   (w :: Data.ByteString.Builder.Internal.BuildStep r1)
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.echoHandler_x of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case w of k1 { DEFAULT ->
                 case GHC.Prim.<=# dt3 8160# of lwild {
                   DEFAULT
                   -> (# w1,
                         Data.ByteString.Builder.Internal.InsertChunk @ r1 ww wild k1 #)
                   1#
                   -> let {
                        op' :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ww dt3
                      } in
                      let {
                        ip :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt dt2
                      } in
                      case GHC.Prim.ltAddr# ww1 op' of lwild1 {
                        DEFAULT
                        -> case {__pkg_ccall base-4.11.1.0 GHC.Prim.Addr#
                                                           -> GHC.Prim.Addr#
                                                           -> GHC.Prim.Word#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Addr# #)}
                                  ww
                                  ip
                                  (GHC.Prim.int2Word# dt3)
                                  w1 of wild3 { (#,#) ds4 ds5 ->
                           case GHC.Prim.touch#
                                  @ 'GHC.Types.LiftedRep
                                  @ GHC.ForeignPtr.ForeignPtrContents
                                  dt1
                                  ds4 of s' { DEFAULT ->
                           (k1 (Data.ByteString.Builder.Internal.BufferRange op' ww1))
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Data.ByteString.Builder.Internal.BuildSignal r1>_R)
                             s' } }
                        1#
                        -> Data.ByteString.Builder.Internal.$wwrappedBytesCopyStep
                             @ r1
                             ip
                             (GHC.Prim.plusAddr# ip dt3)
                             (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.touch#
                                     @ 'GHC.Types.LiftedRep
                                     @ GHC.ForeignPtr.ForeignPtrContents
                                     dt1
                                     s of s' { DEFAULT ->
                              (k1 br1)
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r1>_R)
                                s' })
                               `cast`
                             (<Data.ByteString.Builder.Internal.BufferRange>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.ByteString.Builder.Internal.BuildSignal r1>_R))
                             ww
                             ww1
                             w1 } } } }) -}
c092cc85108b2c0e03b81fd747536fb9
  echoHandler :: Snap.Internal.Core.Snap ()
  {- Arity: 3,
     Strictness: <L,U><L,U><S(S(LLLLLLLLLLLLLLLLLLSLL)LLL),1*U(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Main.echoHandler1
                  `cast`
                (Sym (Snap.Internal.Core.N:Snap[0] <()>_R)) -}
6cf1fe4c4167284c2a44db38da935cb6
  echoHandler1 ::
    (() -> Snap.Internal.Core.SnapState -> GHC.Types.IO r)
    -> (Snap.Internal.Core.Zero
        -> Snap.Internal.Core.SnapState -> GHC.Types.IO r)
    -> Snap.Internal.Core.SnapState
    -> GHC.Types.IO r
  {- Arity: 3,
     Strictness: <L,U><L,U><S(S(LLLLLLLLLLLLLLLLLLSLL)LLL),1*U(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ r1
                   (sk :: () -> Snap.Internal.Core.SnapState -> GHC.Types.IO r1)
                   (fk :: Snap.Internal.Core.Zero
                          -> Snap.Internal.Core.SnapState -> GHC.Types.IO r1)
                   (st :: Snap.Internal.Core.SnapState) ->
                 case st of wild { Snap.Internal.Core.SnapState ds1 ds2 ds3 ds4 ->
                 case ds1 of wild1 { Snap.Internal.Http.Types.Request ds ds7 dt ds8 dt1 ds9 ds10 ds5 ds6 ds11 ds12 dt2 dt3 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 case Main.echoHandler_k of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 let {
                   karg1 :: GHC.Base.Maybe Data.ByteString.Internal.ByteString
                            -> Snap.Internal.Core.SnapState -> GHC.Types.IO r1
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (a2 :: GHC.Base.Maybe
                                Data.ByteString.Internal.ByteString)[OneShot]
                       (st' :: Snap.Internal.Core.SnapState)[OneShot] ->
                     case a2 of wild2 {
                       GHC.Base.Nothing
                       -> Main.echoHandler3 `cast` (Snap.Internal.Core.N:Snap[0] <()>_R)
                            @ r1
                            sk
                            fk
                            st'
                       GHC.Base.Just x2
                       -> let {
                            $wb3 :: forall r2.
                                    Data.ByteString.Builder.Internal.BuildStep r2
                                    -> GHC.Prim.Addr#
                                    -> GHC.Prim.Addr#
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r2 #)
                              {- Arity: 4, Strictness: <S,1*U><L,U><L,U><S,U>, Inline: [0] -}
                            = \ @ r2
                                (w :: Data.ByteString.Builder.Internal.BuildStep r2)
                                (ww7 :: GHC.Prim.Addr#)[OneShot]
                                (ww8 :: GHC.Prim.Addr#)[OneShot]
                                (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case x2 of wild3 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                              case w of k1 { DEFAULT ->
                              case GHC.Prim.<=# dt7 8160# of lwild {
                                DEFAULT
                                -> (# w1,
                                      Data.ByteString.Builder.Internal.InsertChunk
                                        @ r2
                                        ww7
                                        wild3
                                        k1 #)
                                1#
                                -> let {
                                     op' :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ww7 dt7
                                   } in
                                   let {
                                     ip :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt4 dt6
                                   } in
                                   case GHC.Prim.ltAddr# ww8 op' of lwild1 {
                                     DEFAULT
                                     -> case {__pkg_ccall base-4.11.1.0 GHC.Prim.Addr#
                                                                        -> GHC.Prim.Addr#
                                                                        -> GHC.Prim.Word#
                                                                        -> GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                        -> (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              GHC.Prim.Addr# #)}
                                               ww7
                                               ip
                                               (GHC.Prim.int2Word# dt7)
                                               w1 of wild4 { (#,#) ds21 ds22 ->
                                        case GHC.Prim.touch#
                                               @ 'GHC.Types.LiftedRep
                                               @ GHC.ForeignPtr.ForeignPtrContents
                                               dt5
                                               ds21 of s' { DEFAULT ->
                                        (k1 (Data.ByteString.Builder.Internal.BufferRange op' ww8))
                                          `cast`
                                        (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal r2>_R)
                                          s' } }
                                     1#
                                     -> Data.ByteString.Builder.Internal.$wwrappedBytesCopyStep
                                          @ r2
                                          ip
                                          (GHC.Prim.plusAddr# ip dt7)
                                          (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                             (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.Prim.touch#
                                                  @ 'GHC.Types.LiftedRep
                                                  @ GHC.ForeignPtr.ForeignPtrContents
                                                  dt5
                                                  s of s' { DEFAULT ->
                                           (k1 br1)
                                             `cast`
                                           (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal r2>_R)
                                             s' })
                                            `cast`
                                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r2>_R))
                                          ww7
                                          ww8
                                          w1 } } } }
                          } in
                          let {
                            b2 :: forall r2.
                                  Data.ByteString.Builder.Internal.BuildStep r2
                                  -> Data.ByteString.Builder.Internal.BufferRange
                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.ByteString.Builder.Internal.BuildSignal r2 #)
                              {- Arity: 3, Strictness: <S,1*U><S(SS),1*U(U,U)><S,U>, Inline: [0],
                                 Unfolding: InlineRule (3, True, False)
                                            (\ @ r2
                                               (w :: Data.ByteString.Builder.Internal.BuildStep r2)
                                               (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                                               (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                             case w1 of ww7 { Data.ByteString.Builder.Internal.BufferRange ww8 ww9 ->
                                             $wb3 @ r2 w ww8 ww9 w2 }) -}
                            = \ @ r2
                                (w :: Data.ByteString.Builder.Internal.BuildStep r2)
                                (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                                (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case w1 of ww7 { Data.ByteString.Builder.Internal.BufferRange ww8 ww9 ->
                              $wb3 @ r2 w ww8 ww9 w2 }
                          } in
                          let {
                            lvl19 :: GHC.Base.Maybe Data.ByteString.Builder.Internal.Builder
                            = GHC.Base.Just
                                @ Data.ByteString.Builder.Internal.Builder
                                b2
                                  `cast`
                                ((forall (r2 :: <*>_N).
                                  <Data.ByteString.Builder.Internal.BuildStep r2>_R
                                  ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal
                                                   r2>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))
                          } in
                          (Snap.Internal.Core.addToOutput
                             @ Snap.Internal.Core.Snap
                             Snap.Internal.Core.$fMonadSnapSnap
                             (\ (str :: System.IO.Streams.Internal.OutputStream
                                          Data.ByteString.Builder.Internal.Builder)
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case str of wild3 { System.IO.Streams.Internal.OutputStream ds21 ->
                              case (ds21 lvl19) `cast` (GHC.Types.N:IO[0] <()>_R)
                                     s of ds22 { (#,#) ipv ipv1 ->
                              (# ipv, wild3 #) } })
                               `cast`
                             (<System.IO.Streams.Internal.OutputStream
                                 Data.ByteString.Builder.Internal.Builder>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <System.IO.Streams.Internal.OutputStream
                                               Data.ByteString.Builder.Internal.Builder>_R)))
                            `cast`
                          (Snap.Internal.Core.N:Snap[0] <()>_R)
                            @ r1
                            sk
                            fk
                            st' }
                 } in
                 case Snap.Internal.Http.Types.$wpoly_go13
                        @ [Data.ByteString.Internal.ByteString]
                        ww1
                        ww2
                        ww3
                        ww4
                        ds18 of wild2 {
                   GHC.Base.Nothing
                   -> karg1
                        (GHC.Base.Nothing @ Data.ByteString.Internal.ByteString)
                        wild
                   GHC.Base.Just x2
                   -> karg1
                        (GHC.Base.Just
                           @ Data.ByteString.Internal.ByteString
                           (Data.ByteString.concat
                              (Data.OldList.intersperse
                                 @ Data.ByteString.Internal.ByteString
                                 Main.echoHandler2
                                 x2)))
                        wild } } } }) -}
52d90fc50b6d5f6c57273744e02313a4
  echoHandler2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Main.echoHandler_addr#
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Main.echoHandler_addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
24536313d1ee50990eb961080993ed07
  echoHandler3 :: Snap.Internal.Core.Snap ()
  {- Unfolding: (Snap.Internal.Core.addToOutput
                   @ Snap.Internal.Core.Snap
                   Snap.Internal.Core.$fMonadSnapSnap
                   Main.echoHandler4
                     `cast`
                   (<System.IO.Streams.Internal.OutputStream
                       Data.ByteString.Builder.Internal.Builder>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <System.IO.Streams.Internal.OutputStream
                                     Data.ByteString.Builder.Internal.Builder>_R))) -}
32bbcf8f65b92a4ba892e63e906d4584
  echoHandler4 ::
    System.IO.Streams.Internal.OutputStream
      Data.ByteString.Builder.Internal.Builder
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          System.IO.Streams.Internal.OutputStream
            Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <S(C(C(S(SL)))),1*U(U)><S,U>,
     Unfolding: (\ (str :: System.IO.Streams.Internal.OutputStream
                             Data.ByteString.Builder.Internal.Builder)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case str of wild { System.IO.Streams.Internal.OutputStream ds1 ->
                 case (ds1 Main.echoHandler5) `cast` (GHC.Types.N:IO[0] <()>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 (# ipv, wild #) } }) -}
0bb48ed76077aed1592b6dceb41f019c
  echoHandler5 ::
    GHC.Base.Maybe Data.ByteString.Builder.Internal.Builder
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Data.ByteString.Builder.Internal.Builder
                   Main.echoHandler6
                     `cast`
                   ((forall (r1 :: <*>_N).
                     <Data.ByteString.Builder.Internal.BuildStep r1>_R
                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal
                                      r1>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
463a5f88007b8afbca43aa3011f3128a
  echoHandler6 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, Strictness: <S,1*U><S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r1
                   (w :: Data.ByteString.Builder.Internal.BuildStep r1)
                   (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Main.$wb @ r1 w ww1 ww2 w2 }) -}
484c492e67d55de2ae75622d08c908c4
  echoHandler_addr# :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" "#) -}
2a845a5b5a374e813a325ab47bc4da83
  echoHandler_addr#1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("must specify echo/param in URL"#) -}
0a309f1aec3f5ed027b261fc7ab37ee2
  echoHandler_addr#2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("echoparam"#) -}
a2f5711c4fa7621762ff18e701aba345
  echoHandler_k :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Main.echoHandler_addr#2
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Main.echoHandler_addr#2
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
ac4cc84ec79b87ccdfabf88a9fb88a09
  echoHandler_x :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        Main.echoHandler_addr#1
                        ipv of wild { (#,#) ds ds2 ->
                 Data.ByteString.Internal.PS
                   Main.echoHandler_addr#1
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds2) } }) -}
1ca8239953f4997dab65afb773edaf25
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
912f0ca4299fa18c6e4e0b51cdc5daa7
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Snap.Internal.Http.Server.Config.commandLineConfig3
                        @ Snap.Internal.Core.Snap
                        @ GHC.Types.Any
                        Snap.Internal.Core.$fMonadSnapSnap
                        Snap.Http.Server.quickHttpServe2
                        (Snap.Internal.Http.Server.Config.commandLineConfig2
                           @ GHC.Types.Any)
                        Snap.Http.Server.quickHttpServe_defaults
                        s of ds1 { (#,#) ipv ipv1 ->
                 Snap.Http.Server.httpServe1
                   @ GHC.Types.Any
                   ipv1
                   Main.main2 `cast` (Sym (Snap.Internal.Core.N:Snap[0] <()>_R))
                   ipv }) -}
73704c96c09d60403f0cb845cdfbcfe9
  main2 ::
    (() -> Snap.Internal.Core.SnapState -> GHC.Types.IO r)
    -> (Snap.Internal.Core.Zero
        -> Snap.Internal.Core.SnapState -> GHC.Types.IO r)
    -> Snap.Internal.Core.SnapState
    -> GHC.Types.IO r
  {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
76c9e03b64063ae1d7a1e6f67bc71c7a
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
784dd9cda96acc68010890ee803c2e5b
  site :: Snap.Internal.Core.Snap ()
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main2 `cast` (Sym (Snap.Internal.Core.N:Snap[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

